#!/usr/bin/env python3

import os
import pandas as pd
from src.dicts import *
import re
import time
from wikidataintegrator import wdi_login, wdi_core
import getpass
from src.login import *
import clipboard

os.system(
    "wget -O data/cell_classes.xlsx https://docs.google.com/spreadsheets/d/e/2PACX-1vTanLtzxD6OXpu3Ze4aNITlIMZEqfK3qrrcNiwFE6kA-YVnuzULp3dG3oYIe5gYAVj28QWZnGwzN_H6/pub\?output\=xlsx"
)

cells = pd.read_excel("data/cell_classes.xlsx", sheet_name="cell classes")
print("###### Biocuration of Cell Classes Table ######")
print(cells.head())

subclass_dict = dicts["celltypes_dict"]


def write_cell_dict(subclass_dict):
    with open("dictionaries/celltypes_dict.json", "w+") as f:
        f.write(json.dumps(subclass_dict, indent=4, sort_keys=True))


def add_key(dictionary, string):
    clipboard.copy(string)

    qid = input(f"What is the qid for: {string} ?")

    dictionary[string] = qid
    return dictionary


login_instance = wdi_login.WDLogin(user="TiagoLubiana", pwd=WDPASS)

try:
    for index, row in cells.iterrows():

        label = row["label"]
        print(f"Running code for {label} ")

        if label in subclass_dict:
            continue

        data_for_item = []
        stated_in_full_reference = wdi_core.WDItemID(
            value=row["stated in"], prop_nr="P248", is_reference=True
        )
        references = [[stated_in_full_reference]]

        flag = 0
        for species in species_list:
            if species in label and flag == 0:
                flag = 1
                species_qid = species_dict[species]["qid"]
                species_name = species_dict[species]["species_name"]
                description = f"cell type in {species_name}"
                data_for_item.append(
                    wdi_core.WDItemID(
                        value=species_qid, prop_nr="P703", references=references
                    )
                )
            else:
                pass

        if flag == 0:
            description = "cell type"
        else:
            pass

        try:

            # Add subclass of (P279) statements
            if "|" in row["subclass of"]:
                subclass_terms = row["subclass of"].split("|")
                subclass_terms = [term.strip() for term in subclass_terms]

            else:
                subclass_terms = [row["subclass of"].strip()]

            for subclass_term in subclass_terms:
                print(f"Running for subclass term '{subclass_term}'")

                if subclass_term == "":
                    continue

                if re.findall("Q[0-9]*", subclass_term):
                    subclass = subclass_term.strip()
                else:
                    if subclass_term not in subclass_dict:
                        subclass_dict = add_key(subclass_dict, subclass_term)

                    subclass = subclass_dict[subclass_term]

                data_for_item.append(wdi_core.WDItemID(value=subclass, prop_nr="P279"))

            # Add develops from (P3094) statements
            if str(row["develops from"]) != "nan":
                if re.findall("Q[0-9]*", row["develops from"]):
                    precursor_cell = row["develops from"]
                else:
                    precursor_cell = subclass_dict[row["develops from"]]

                data_for_item.append(
                    wdi_core.WDItemID(
                        value=precursor_cell, prop_nr="P3094", references=references
                    )
                )

            if str(row["anatomical location"]) != "nan":
                if re.findall("Q[0-9]*", row["anatomical location"]):
                    part_of = row["anatomical location"]
                else:
                    if row["anatomical location"] not in dicts["part_of"]:
                        dicts["part_of"] = add_key(
                            dicts["part_of"], row["anatomical location"]
                        )
                    part_of = dicts["part_of"][row["anatomical location"]]

                data_for_item.append(
                    wdi_core.WDItemID(
                        value=part_of, prop_nr="P927", references=references
                    )
                )

            # Add article that describes item via "described by source" (P1343)
            if str(row["described by source"]) != "nan":
                data_for_item.append(
                    wdi_core.WDItemID(value=row["described by source"], prop_nr="P1343")
                )

        except:
            print("failed: ")
            print(row)
            break

        # Add instances of "cell type"

        if str(row["instance of"]) != "nan":
            instance = instance_dict[row["instance of"]]
        else:
            instance = instance_dict["cell type"]

        data_for_item.append(
            wdi_core.WDItemID(value=instance, prop_nr="P31", references=references)
        )

        wd_item = wdi_core.WDItemEngine(data=data_for_item)

        if str(row["aliases"]) != "nan":
            aliases = row["aliases"].split("|")
        else:
            aliases = []

        # Add listed aliases, labels and descriptions (set earlier)
        wd_item.set_label(label=label, lang="en")
        wd_item.set_aliases(aliases, lang="en")
        wd_item.set_description(description, lang="en")

        try:
            wd_item.write(login_instance)
            subclass_dict[label] = wd_item.wd_item_id
        except:
            print("Something went wrong")

        time.sleep(1)

except:
    pass

write_cell_dict(subclass_dict)
